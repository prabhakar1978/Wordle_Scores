arrange(desc(Points_Per_Game))
View(Win_Points)
Points_plot = ggplot(data = Win_Points, aes(x = reorder(Player_Name, - Points_Per_Game),
y = Points_Per_Game)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.5) +  # Create bars
labs(title = "Points Per Game", x = "Player", y = "Points Per Game") +
ylim(0,0.5) +
geom_text(aes(label = Points_Per_Game, vjust = -0.5, size = 5, color = "brown")
)+
theme(
panel.grid.major.y = element_line(color = "blue",
size = 0.5,
linetype = 1),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x =  element_blank()
)
Points_plot
Win_Points = Wordle_Wins %>%
select(Player_Name, Wordle_Number, Win) %>%
left_join(Winner_Count, by = "Wordle_Number") %>%
rowwise() %>%
mutate(Points = Win/Winner_Count) %>%
ungroup() %>%
group_by(Player_Name) %>%
summarise(Total_Points = sum(Points)) %>%
left_join(select(Player_Wins, Player_Name, Played), by = "Player_Name") %>%
mutate(Points_Per_Game = round(Total_Points/Played, 3)) %>%
arrange(desc(Points_Per_Game))
Points_plot = ggplot(data = Win_Points, aes(x = reorder(Player_Name, - Points_Per_Game),
y = Points_Per_Game)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.5) +  # Create bars
labs(title = "Points Per Game", x = "Player", y = "Points Per Game") +
ylim(0,0.5) +
geom_text(aes(label = Points_Per_Game, vjust = -0.5, size = 5, color = "brown")
)+
theme(
panel.grid.major.y = element_line(color = "blue",
size = 0.5,
linetype = 1),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x =  element_blank()
)
Points_plot
rm(list=ls())
#| echo: false
Wordle_Group_Data_txt <- readLines(con = "20240906_Wordle_WhatsApp.txt")
Wordle_Group_Data_txt <- readLines(con = "20240906_Wordle_WhatsApp.txt")
library (tidyverse)
library(rvest)
library(xml2)
#| echo: false
Wordle_Group_Data_txt <- readLines(con = "20240906_Wordle_WhatsApp.txt")
getwd()
list=ls()
#| echo: false
Wordle_Group_Data_txt <- readLines(con = "20240906_Wordle_WhatsApp.txt")
Family_Talk_Data_txt <- readLines(con = "20240312_FamilyTalk_WhatsApp.txt")
#create tibble with this data as a column
Wordle_Group_Data_df <- tibble(
Wordle_Data_txt = Wordle_Group_Data_txt
)
Family_Talk_Data_df <- tibble(
Wordle_Data_txt = Family_Talk_Data_txt
)
#Combining the wordle group and Amma Whatsapp chats
Wordle_Group_Data_df  = rbind(Wordle_Group_Data_df, Family_Talk_Data_df)
#regex cheat sheet MAGIC!!! - https://github.com/rstudio/cheatsheets/blob/main/regex.pdf
#Stringr Regex Magic - https://stringr.tidyverse.org/articles/regular-expressions.html
#reg expressions tutorials page - https://en.wikibooks.org/wiki/R_Programming/Text_Processing#Regular_Expressions
# reGULAR EXPRESSIONS IN r: https://jfjelstul.github.io/regular-expressions-tutorial/
#remove video and image with 'omitted' word
Wordle_Group_Data_df = Wordle_Group_Data_df %>% rowwise() %>%
#remove media entries in Whatsapp data
mutate(Omitted = str_extract(
string = Wordle_Data_txt,
pattern = "video|image|omitted")
) %>%
filter(is.na(Omitted)) %>%
select(Wordle_Data_txt) %>%
#remove Pappu
rowwise() %>%
mutate(Pappu = str_extract(
string = Wordle_Data_txt,
pattern = "Pappu")
) %>%
filter(is.na(Pappu)) %>%
select(Wordle_Data_txt) %>%
#keep only Wordle lines
rowwise() %>%
mutate(Wordle_line = str_extract(
string = Wordle_Data_txt,
pattern = "Wordle")
) %>%
filter(!is.na(Wordle_line)) %>%
select(Wordle_Data_txt)
#Extract dates
Wordle_Group_Data_df = Wordle_Group_Data_df %>% rowwise() %>% mutate(Date = str_extract( string = Wordle_Data_txt, pattern = "[0-9]{1,2}[[:punct:]][0-9]{1,2}[[:punct:]][0-9]{2}") %>% lubridate::mdy() ) %>% filter(Date >= lubridate::ymd("2023-01-01"))
#Get Last updated Date
Updated_Date = max(Wordle_Group_Data_df$Date)
#Name List
Name_List = c("Mike",
"Cindy",
"Lindy",
"Ashley",
"Prabha",
"Will",
"Shantha",
"I C E Amma"
)
# Get Wordle number
Wordle_Group_Data_df = Wordle_Group_Data_df %>%
rowwise() |>
#remove ',' from Wordlenumber
mutate(Wordle_Data_txt = str_remove_all(
string = Wordle_Data_txt,
pattern = ","
)
) |>
#remove '*' from end of score
mutate(Wordle_Data_txt = str_remove(
string = Wordle_Data_txt,
pattern = "[*]"
)
) |>
#extract Wordle #
mutate(Wordle_Number = as.numeric(
str_extract(string = Wordle_Data_txt,
pattern = "[0-9]{3,4}"
)
)
) |>
#deleting NA's created extracting Wordle Number
na.omit() |>
mutate(Player_Name = str_extract(
string = Wordle_Data_txt,
pattern = str_c(Name_List, collapse = "|")
)
) |>
#replace Amma with Shantha
mutate(Player_Name = str_replace(
string = Player_Name,
pattern = "I C E Amma",
replacement = "Shantha"
)
) |>
#Get Wordle Score
mutate(Score = str_sub(Wordle_Data_txt,
start = -3,
end = -3)
) |>
# replace incomplete score 'X' with 7
mutate(Score = str_replace(
string = Score,
pattern = "X",
replacement = "7"
)
)
# covert Score to numeric
Wordle_Group_Data_df$Score = as.numeric(Wordle_Group_Data_df$Score)
Wordle_Group_Cleaned_Data_df = Wordle_Group_Data_df
# Simplest measure - Average Score
Average_Score = Wordle_Group_Cleaned_Data_df %>%
#filter(Wordle_Result_Line == "Yes") %>%
#select(Player_Name, Score, Wordle_Number) %>%
#na.omit() %>%
group_by(Player_Name) %>%
summarize(Mean_Score = mean(Score),
Num_Entries = n_distinct(Wordle_Number)
)
Average_Score$Player_Name_Mean_Score = paste(Average_Score$Player_Name,
round(Average_Score$Mean_Score, 2),
sep = " - ")
ggplot(data = Average_Score,
aes(x = Num_Entries, y = Mean_Score, label = Player_Name_Mean_Score)
) +
geom_point(size = 3.5,  color = "purple") +
geom_text(hjust=0, vjust=0) +
ylim(min(Average_Score$Mean_Score) * 0.95, max(Average_Score$Mean_Score) * 1.05) +
xlim(0, max(Average_Score$Num_Entries) * 1.2) +
theme(
panel.grid.major.y = element_line(color = "blue",
size = 0.5,
linetype = 1),
panel.grid.minor.y = element_line(color = "blue",
size = 0.5,
linetype = 1),
panel.grid.minor.x = element_blank()
)
# Points for Wins
#coverting to wide df with same Wordle # - Wordle# has to be used rather than Date as Amma can post in India times for same Wordle day/word/contest
#Need to check why duplicates
Wordle_Group_Cleaned_Data_df_wide = Wordle_Group_Cleaned_Data_df %>%
distinct() %>%
select(Player_Name, Score, Wordle_Number) %>%
tidyr::pivot_wider(
names_from = Player_Name,
values_from = Score,
values_fn = {mean}
)
Wordle_Group_Cleaned_Data_df_wide$Win_Score = with(Wordle_Group_Cleaned_Data_df_wide,
pmin( Ashley,Mike, Prabha, Cindy, Will, Lindy, Shantha, na.rm = T)
)
#Win score for ech wordle game by Wordle number
Wordle_Win_Score = Wordle_Group_Cleaned_Data_df_wide %>% select(Wordle_Number, Win_Score)
Wordle_Wins = Wordle_Group_Data_df %>%
select(Player_Name, Score, Wordle_Number)%>%
unique() %>%
left_join(Wordle_Win_Score, by = "Wordle_Number") %>%
rowwise() %>%
mutate(Win = if_else(Score <= Win_Score,
1, #Win
0)) %>%
na.omit()
Player_Wins = Wordle_Wins %>%
group_by(Player_Name) %>%
summarize(Total_Wins = sum(Win),
Played = n(),
Win_Percentage = round(Total_Wins/n()*100, 0)
) %>%
arrange(desc(Win_Percentage))
Player_Wins = Player_Wins[order(-Player_Wins$Win_Percentage),]
Win_Percentage_plot = ggplot(Player_Wins, aes(x = reorder(Player_Name, - Win_Percentage),
y = Win_Percentage)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.5) +  # Create bars
labs(title = "Win Percentage", x = "Player", y = "Win Percentage") +
ylim(0,100)+
geom_text(aes(label = paste(Win_Percentage, "%", sep = "")), vjust = -0.5, size = 5, color = "brown") +
theme(
panel.grid.major.y = element_line(color = "blue",
size = 0.5,
linetype = 1),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x =  element_blank()
)
Win_Percentage_plot
# Simplest measure - Average Score
Average_Score = Wordle_Group_Cleaned_Data_df %>%
#filter(Wordle_Result_Line == "Yes") %>%
#select(Player_Name, Score, Wordle_Number) %>%
#na.omit() %>%
group_by(Player_Name) %>%
summarize(Mean_Score = mean(Score),
Num_Entries = n_distinct(Wordle_Number)
)
Average_Score$Player_Name_Mean_Score = paste(Average_Score$Player_Name,
round(Average_Score$Mean_Score, 2),
sep = " - ")
ggplot(data = Average_Score,
aes(x = Num_Entries, y = Mean_Score, label = Player_Name_Mean_Score)
) +
geom_point(size = 3.5,  color = "purple") +
geom_text(hjust=0, vjust=0) +
ylim(min(Average_Score$Mean_Score) * 0.95, max(Average_Score$Mean_Score) * 1.05) +
xlim(0, max(Average_Score$Num_Entries) * 1.2) +
theme(
panel.grid.major.y = element_line(color = "blue",
size = 0.5,
linetype = 1),
panel.grid.minor.y = element_line(color = "blue",
size = 0.5,
linetype = 1),
panel.grid.minor.x = element_blank()
)
# Points for Wins
#coverting to wide df with same Wordle # - Wordle# has to be used rather than Date as Amma can post in India times for same Wordle day/word/contest
#Need to check why duplicates
Wordle_Group_Cleaned_Data_df_wide = Wordle_Group_Cleaned_Data_df %>%
distinct() %>%
select(Player_Name, Score, Wordle_Number) %>%
tidyr::pivot_wider(
names_from = Player_Name,
values_from = Score,
values_fn = {mean}
)
Wordle_Group_Cleaned_Data_df_wide$Win_Score = with(Wordle_Group_Cleaned_Data_df_wide,
pmin( Ashley,Mike, Prabha, Cindy, Will, Lindy, Shantha, na.rm = T)
)
#Win score for ech wordle game by Wordle number
Wordle_Win_Score = Wordle_Group_Cleaned_Data_df_wide %>% select(Wordle_Number, Win_Score)
Wordle_Wins = Wordle_Group_Data_df %>%
select(Player_Name, Score, Wordle_Number)%>%
unique() %>%
left_join(Wordle_Win_Score, by = "Wordle_Number") %>%
rowwise() %>%
mutate(Win = if_else(Score <= Win_Score,
1, #Win
0)) %>%
na.omit()
Player_Wins = Wordle_Wins %>%
group_by(Player_Name) %>%
summarize(Total_Wins = sum(Win),
Played = n(),
Win_Percentage = round(Total_Wins/n()*100, 1)
) %>%
arrange(desc(Win_Percentage))
Player_Wins = Player_Wins[order(-Player_Wins$Win_Percentage),]
Win_Percentage_plot = ggplot(Player_Wins, aes(x = reorder(Player_Name, - Win_Percentage),
y = Win_Percentage)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.5) +  # Create bars
labs(title = "Win Percentage", x = "Player", y = "Win Percentage") +
ylim(0,100)+
geom_text(aes(label = paste(Win_Percentage, "%", sep = "")), vjust = -0.5, size = 5, color = "brown") +
theme(
panel.grid.major.y = element_line(color = "blue",
size = 0.5,
linetype = 1),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x =  element_blank()
)
Win_Percentage_plot
Winner_Count = Wordle_Wins %>%
select(Player_Name, Wordle_Number, Win) %>%
group_by(Wordle_Number) %>%
summarize(Winner_Count = sum(Win))
Win_Points = Wordle_Wins %>%
select(Player_Name, Wordle_Number, Win) %>%
left_join(Winner_Count, by = "Wordle_Number") %>%
rowwise() %>%
mutate(Points = Win/Winner_Count) %>%
ungroup() %>%
group_by(Player_Name) %>%
summarise(Total_Points = sum(Points)) %>%
left_join(select(Player_Wins, Player_Name, Played), by = "Player_Name") %>%
mutate(Points_Per_Game = round(Total_Points/Played, 3)) %>%
arrange(desc(Points_Per_Game))
Points_plot = ggplot(data = Win_Points, aes(x = reorder(Player_Name, - Points_Per_Game),
y = Points_Per_Game)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.5) +  # Create bars
labs(title = "Points Per Game", x = "Player", y = "Points Per Game") +
ylim(0,0.5) +
geom_text(aes(label = Points_Per_Game, vjust = -0.5, size = 5, color = "brown")
)+
theme(
panel.grid.major.y = element_line(color = "blue",
size = 0.5,
linetype = 1),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x =  element_blank()
)
Points_plot
class(Wordle)
class(Wordle_Wins)
str(Wordle_Wins)
str(Wordle_Wins) |> class()
class(str(Wordle_Wins))
tbl_summary(as.data.frame(str(Wordle_Wins)))
glimpse(Wordle_Wins)
Wordle_Wins = Wordle_Group_Data_df %>%
select(Player_Name, Score, Wordle_Number)%>%
unique() %>%
left_join(Wordle_Win_Score, by = "Wordle_Number") %>%
rowwise() %>%
mutate(Win = if_else(Score <= Win_Score,
1, #Win
0)) %>%
na.omit() |>
arrange(Wordle_number)
Wordle_Wins = Wordle_Group_Data_df %>%
select(Player_Name, Score, Wordle_Number)%>%
unique() %>%
left_join(Wordle_Win_Score, by = "Wordle_Number") %>%
rowwise() %>%
mutate(Win = if_else(Score <= Win_Score,
1, #Win
0)) %>%
na.omit() |>
arrange(Wordle_Number)
table(Winner_Count$Winner_Count)
View(Player_Wins)
Wordle_Wins %>%
group_by(Player_Name) %>%
summarize(Total_Wins = sum(Win),
Played = n(),
Win_Percentage = round(Total_Wins/n()*100, 1)
)
Player_Wins = Wordle_Wins %>%
group_by(Player_Name) %>%
summarize(Total_Wins = sum(Win),
Played = n(),
Win_Percentage = round(Total_Wins/n()*100, 1)
) %>%
arrange(desc(Win_Percentage))
Wordle_Wins %>%
group_by(Player_Name) %>%
summarize(Total_Wins = sum(Win),
Played = n(),
Win_Percentage = round(Total_Wins/n()*100, 1)
) %>%
arrange(desc(Win_Percentage))
Player_Wins[order(-Player_Wins$Win_Percentage),]
Player_Wins = Wordle_Wins %>%
group_by(Player_Name) %>%
summarize(Total_Wins = sum(Win),
Played = n(),
Win_Percentage = round(Total_Wins/n()*100, 1)
) %>%
arrange(desc(Win_Percentage))
#Player_Wins = Player_Wins[order(-Player_Wins$Win_Percentage),]
Win_Percentage_plot = ggplot(Player_Wins, aes(x = reorder(Player_Name, - Win_Percentage),
y = Win_Percentage)) +
geom_bar(stat = "identity", fill = "skyblue", width = 0.5) +  # Create bars
labs(title = "Win Percentage", x = "Player", y = "Win Percentage") +
ylim(0,100)+
geom_text(aes(label = paste(Win_Percentage, "%", sep = "")), vjust = -0.5, size = 5, color = "brown") +
theme(
panel.grid.major.y = element_line(color = "blue",
size = 0.5,
linetype = 1),
panel.grid.minor.y = element_blank(),
panel.grid.minor.x = element_blank(),
panel.grid.major.x =  element_blank()
)
Win_Percentage_plot
?order
Player_Wins = Player_Wins[order(-Player_Wins$Win_Percentage),]
head(Wordle_Wins)
View(Winner_Count)
Wordle_Wins %>%
select(Player_Name, Wordle_Number, Win) %>%
left_join(Winner_Count, by = "Wordle_Number")
Wordle_Wins %>%
select(Player_Name, Wordle_Number, Win) %>%
left_join(Winner_Count, by = "Wordle_Number") %>%
rowwise() %>%
mutate(Points = Win/Winner_Count)
Wordle_Wins %>%
select(Player_Name, Score, Wordle_Number, Win) %>%
left_join(Winner_Count, by = "Wordle_Number") %>%
rowwise() %>%
mutate(Points = Win/Winner_Count)
Wordle_Wins %>%
select(Player_Name, Score, Wordle_Number, Win) %>%
left_join(Winner_Count, by = "Wordle_Number") %>%
rowwise() %>%
mutate(Points = Win/Winner_Count) %>%
ungroup() %>%
group_by(Player_Name) %>%
summarise(Total_Points = sum(Points)) %>%
left_join(select(Player_Wins, Player_Name, Played), by = "Player_Name") %>%
mutate(Points_Per_Game = round(Total_Points/Played, 3)) %>%
arrange(desc(Points_Per_Game))
ggplot(data = Average_Score,
aes(x = Num_Entries, y = Mean_Score, label = Player_Name_Mean_Score)
) +
geom_point(size = 3.5,  color = "purple") +
geom_text(hjust=0, vjust=0, nudge_y = 0.5) +
ylim(min(Average_Score$Mean_Score) * 0.95, max(Average_Score$Mean_Score) * 1.05) +
xlim(0, max(Average_Score$Num_Entries) * 1.2) +
theme(
panel.grid.major.y = element_line(color = "blue",
size = 0.5,
linetype = 1),
panel.grid.minor.y = element_line(color = "blue",
size = 0.5,
linetype = 1),
panel.grid.minor.x = element_blank()
)
ggplot(data = Average_Score,
aes(x = Num_Entries, y = Mean_Score, label = Player_Name_Mean_Score)
) +
geom_point(size = 3.5,  color = "purple") +
geom_text(hjust=0, vjust=0, nudge_y = 0.05) +
ylim(min(Average_Score$Mean_Score) * 0.95, max(Average_Score$Mean_Score) * 1.05) +
xlim(0, max(Average_Score$Num_Entries) * 1.2) +
theme(
panel.grid.major.y = element_line(color = "blue",
size = 0.5,
linetype = 1),
panel.grid.minor.y = element_line(color = "blue",
size = 0.5,
linetype = 1),
panel.grid.minor.x = element_blank()
)
ggplot(data = Average_Score,
aes(x = Num_Entries, y = Mean_Score, label = Player_Name_Mean_Score)
) +
geom_point(size = 3.5,  color = "purple") +
geom_text(hjust=0, vjust=0, nudge_y = 0.02) +
ylim(min(Average_Score$Mean_Score) * 0.95, max(Average_Score$Mean_Score) * 1.05) +
xlim(0, max(Average_Score$Num_Entries) * 1.2) +
theme(
panel.grid.major.y = element_line(color = "blue",
size = 0.5,
linetype = 1),
panel.grid.minor.y = element_line(color = "blue",
size = 0.5,
linetype = 1),
panel.grid.minor.x = element_blank()
)
?linetype
ggplot(data = Average_Score,
aes(x = Num_Entries, y = Mean_Score, label = Player_Name_Mean_Score)
) +
geom_point(size = 3.5,  color = "purple") +
geom_text(hjust=0, vjust=0, nudge_y = 0.02,
) +
ylim(min(Average_Score$Mean_Score) * 0.95, max(Average_Score$Mean_Score) * 1.05) +
xlim(0, max(Average_Score$Num_Entries) * 1.2) +
theme(
panel.grid.major.y = element_line(color = "blue",
size = 0.5,
linetype = 2),
panel.grid.minor.y = element_line(color = "blue",
size = 0.5,
linetype = 2),
panel.grid.minor.x = element_blank()
)
